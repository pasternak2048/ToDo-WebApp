@using ToDo_App.Models.Abstractions
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@model IndexViewModel<User>

@{
    ViewData["Title"] = "Index";
}

<h1>@Localizer["PageTitle"]</h1>

<form asp-action="Index" method="get">

    <div class="form-actions no-color">
        <p>
            <a asp-action="Create" asp-route-page="@Model.PageViewModel.PageNumber" class="btn btn-success">@Localizer["CreateUserButton"]</a>
            <input type="text" name="SearchString" value="@ViewData["SearchFilter"]" />
            <input type="submit" value="@Localizer["SearchButton"]" class="btn btn-outline-primary" />

            @{if (!String.IsNullOrEmpty(@ViewBag.SearchFilter))
                {
                    <a asp-action="Index" class="btn btn-outline-primary">@Localizer["BackToFullListButton"]</a>
                }
            }

        </p>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                @Localizer["UserID"]
            </th>

            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewBag.EmailSort" asp-route-page="@Model.PageViewModel.PageNumber"
                   asp-route-searchString="@ViewBag.SearchFilter">
                    @Localizer["UserEmail"]
                </a>
            </th>
            <th>
                @Localizer["UserFirstName"]
            </th>
            <th>
                @Localizer["UserLastName"]
            </th>
            <th>
                @Localizer["UserAddress"]
            </th>
            <th>
                @Localizer["UserRole"]
            </th>
            <th>
                @Localizer["Actions"]
            </th>

        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Items)
        {
            <tr>

                <td>
                    @Html.DisplayFor(modelItem => item.Id)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Address)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Role.Name)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-page="@Model.PageViewModel.PageNumber" asp-route-id="@item.Id" class="btn btn-outline-primary">@Localizer["EditButton"]</a>
                    <a asp-action="Details" asp-route-page="@Model.PageViewModel.PageNumber" asp-route-id="@item.Id" class="btn btn-outline-primary">@Localizer["DetailsButton"]</a>
                    <a asp-action="Delete" asp-route-page="@Model.PageViewModel.PageNumber" asp-route-id="@item.Id" class="btn btn-outline-danger">@Localizer["DeleteButton"]</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (Model.PageViewModel.HasPreviousPage)
{
    <a asp-action="Index"
       asp-route-page="@(Model.PageViewModel.PageNumber - 1)"
       class="btn btn-outline-dark">
        <i class="glyphicon glyphicon-chevron-left"></i>
        @Localizer["PreviousPage"]
    </a>
}
@if (Model.PageViewModel.HasNextPage)
{
    <a asp-action="Index"
       asp-route-page="@(Model.PageViewModel.PageNumber + 1)"
       class="btn btn-outline-dark">
        @Localizer["NextPage"]
        <i class="glyphicon glyphicon-chevron-right"></i>
    </a>
}